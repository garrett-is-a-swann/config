#!/bin/bash
# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

# if running bash
if [ -n "$BASH_VERSION" ]; then
    ## include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
	    . "$HOME/.bashrc"
    fi
fi

# set PATH so it includes user's private bin directories
export PATH=".:$HOME/bin:$PATH:$HOME/.local/bin:$HOME/.npm-global/bin:./node_modules/.bin"

export FORMAT="\nID\t{{.ID}}\nIMAGE\t{{.Image}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.RunningFor}}\nSTATUS\t{{.Status}}\nPORTS\t{{.Ports}}\nNAMES\t{{.Names}}\n"

export EDITOR="/usr/bin/vim"

function solo(){
    unset GIT_COMMITTER_NAME
    unset GIT_COMMITTER_EMAIL
}

#pair_up "garrett-is-a-swann" "your@email" && git commit
function pair_up(){
    export GIT_COMMITTER_NAME=$1
    export GIT_COMMITTER_EMAIL=$2
}

function pconn_func(){
    while [ -z "$PCONNPASS" ]; do
        looper=1;
        printf "Enter your db pass pls: "
        read -s PCONNPASS
        export PCONNPASS
        PGPASSWORD=$PCONNPASS psql -h localhost -p 5432 -d core -U admin $*
        if [ $? -eq 2 ]; then
            unset PCONNPASS
        fi
    done 
    if [ -z "$looper" ]; then 
        PGPASSWORD=$PCONNPASS psql -h localhost -p 5432 -d core -U admin $*
    fi
    unset looper
}
function docker_conn(){
    docker exec -it $1 bash
}

alias wsvim='vim -c "$(< .vim_workspace)"'
alias dps='docker ps --format=$FORMAT'
alias sa='screen -dRR $1'
alias sls='screen -ls'
alias ta='tmux new-session -A -s $1'
alias tls='tmux ls'
alias dconn='docker_conn $1'
alias pconn='pconn_func'
alias sound='alsamixer'
alias wwwpg='~/codeplay/www/node_modules/.bin/sequelize'
function pd() {
    if [ "$1" = "" ]; then
        popd
    else
        pushd $1
    fi
}

function force() {
    if command -v sfdx &> /dev/null; then
        echo "SFDX not present."
        return
    fi
    echo "SFDX"
    path=$(sed 's/([^-]*).*/\1/' <<< $*);
    attr=$(sed 's/[^-]*//' <<< $*)
    echo "sfdx force:$(sed -re 's/ /:/g' <<< $path) $attr"
          sfdx force:$(sed -re 's/ /:/g' <<< $path) $attr
}

colorize()       { echo -e "\e[$(echo "${@:1:$(($#-1))}" | sed 's/ /;/g')m${!#}\e[0m"; }

vls() {
    ls=$(ls --color=always --group-directories-first)

    col=9999999999
    str=''
    i=1
    for el in $ls; do
        ccount=$(( $(( $(tput cols) / $(wc -m <<< $el) )) + 1 ))
        if [ $ccount -lt $col ]; then
            col=$ccount
        fi
    done

    for el in $ls; do
        if [ -f ".$el.swp" ] || [ -f ".$el.swo" ]; then
            str="$str$(colorize 4 "*$el") "
        else 
            str="$str$el "
        fi
        if [ $(( i % $col )) == 0 ] && [ ! $i == 0 ]; then 
            str="$str\n\n"
        fi
        i=$(( i + 1 ))
    done
    echo -e $str | column -t
}


if [ -f "$HOME/bin/.init.sh" ]; then
    pushd "$HOME/bin" > /dev/null && source ".init.sh" 
    popd > /dev/null
else 
    echo 'cd && git clone git@github.com:garrett-is-a-swann/bin.git'; 
fi

if [ -d ~/.completion ]; then
    for completion in ~/.completion/*.completion; do
        if command -v `echo "$completion" | sed 's/.*\///g' | sed 's/\..*//'` &> /dev/null; then
            . "$completion"
        fi
    done
fi
